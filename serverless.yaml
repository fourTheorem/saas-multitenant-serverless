service: saas-api
frameworkVersion: '3'

provider:
  name: aws
  region: ${opt:region, 'eu-west-1'}
  stage: ${opt:stage, 'dev'}
  runtime: nodejs20.x
  httpApi:
    authorizers:
      defaultAuthorizer:
        type: request
        functionName: authorizer

functions:
  api:
    handler: src/api/index.handler
    events:
      - httpApi:
          path: /
          method: get
          authorizer:
            name: defaultAuthorizer

  authorizer:
    handler: src/authorizer.handler
    environment:
      COGNITO_USER_POOL_ID: !Ref UserPool
      ASSUME_ROLE_ARN: !GetAtt AuthorizerAccessRole.Arn
      PRODUCTS_TABLE_ARN: !GetAtt ProductsTable.Arn
    iamRoleStatements:
      - Effect: Allow
        Action:
          - sts:AssumeRole
        Resource:
          - !GetAtt AuthorizerAccessRole.Arn

resources:
  Resources:
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: saas-user-pool-${self:provider.stage}
        UsernameAttributes: [email]
        AutoVerifiedAttributes: [email]
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: false
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: false
            RequireUppercase: false
            RequireNumbers: false
            RequireSymbols: false
        Schema:
          - AttributeDataType: String
            # NOTE! These attributes are mutable, meaning they can be changed after the user profile is created
            # This does not mean that they can be written by the user on sign-up. That is governed by the
            # App Client attribute write settings (User Pool Client) which make them read-only by default!
            # (https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-attributes.html#user-pool-settings-attribute-permissions-and-scopes)
            Mutable: true
            Name: tenant
            StringAttributeConstraints:
              MinLength: 3
              MaxLength: 16

    UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: saas-user-pool-client-${self:provider.stage}
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_ADMIN_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
          - ALLOW_USER_PASSWORD_AUTH
        GenerateSecret: true
        RefreshTokenValidity: 30
        SupportedIdentityProviders: [COGNITO]
        WriteAttributes: [email]
        CallbackURLs:
          - http://localhost
          - https://oauth.pstmn.io/v1/callback
        DefaultRedirectURI: http://localhost
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthFlows:
          - code
        AllowedOAuthScopes:
          - openid
          - profile
          - email
        UserPoolId:
          Ref: UserPool

    UserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        Domain: saas-login
        UserPoolId: !Ref UserPool

    AuthorizerExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: authorizer-execution-role
        Path: '/'
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole

    AuthorizerAccessRole:
      Type: AWS::IAM::Role
      DependsOn: AuthorizerExecutionRole
      Properties:
        RoleName: authorizer-access-role
        Path: '/'
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                AWS: !GetAtt AuthorizerExecutionRole.Arn
              Action:
                - sts:AssumeRole
            - Effect: Allow
              Principal:
                AWS: '*'
              Action:
                - sts:TagSession
              Condition:
                StringLike:
                  aws:RequestTag/TenantId: '*'
        Policies:
          - PolicyName: authorizer-access-role-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:BatchGetItem
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                    - dynamodb:DeleteItem
                    - dynamodb:UpdateItem
                    - dynamodb:Query
                    - dynamodb:Scan
                  Resource:
                    - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*

    ProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: saas-products-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: tenant
            AttributeType: S
          - AttributeName: productId
            AttributeType: S
        KeySchema:
          - AttributeName: tenant
            KeyType: HASH
          - AttributeName: productId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

  Outputs:
    UserPoolId:
      Value: !Ref UserPool
      Export:
        Name: saas-user-pool-id-${self:provider.stage}
    UserPoolArn:
      Value: !GetAtt UserPool.Arn
      Export:
        Name: saas-user-pool-arn-${self:provider.stage}
    UserPoolClient:
      Value: !Ref UserPoolClient
      Export:
        Name: saas-user-pool-client-id-${self:provider.stage}
    UserPoolProviderUrl:
      Value: !GetAtt UserPool.ProviderURL
      Export:
        Name: saas-user-pool-provider-url-${self:provider.stage}
    ApiGatewayEndpoint:
      Value:
        Fn::Join:
          - ""
          - - "https://"
            - Ref: HttpApi
            - ".execute-api.${self:provider.region}.amazonaws.com"
      Export:
        Name: saas-api-gateway-endpoint-${self:provider.stage}
